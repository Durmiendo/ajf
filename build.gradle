plugins{
    id "java"
    id "com.github.nekit508.mindustry-mod-plugin" version "$nmpVersion" apply true
}

apply plugin: "antlr"

project.repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven { url "https://www.jitpack.io" }
}

group = "com.github.idk"
version = "0.0.1"

sourceSets.main.java.srcDirs = ["src", "gen", "antlr-gen"]
sourceSets.main.antlr.srcDirs = ["antlr"]
sourceSets.main.resources.srcDirs = ["res"]

nmp.genericInit(mindustryVersion)

dependencies {
    annotationProcessor "com.github.bsideup.jabel:jabel-javac-plugin:0.4.2"
    compileOnly "com.github.bsideup.jabel:jabel-javac-plugin:0.4.2"

    antlr "org.antlr:antlr4:4.13.2"

    implementation "com.squareup:javapoet:1.13.0"

    implementation files("tools.jar")
}

configure([tasks.compileJava]) {
    sourceCompatibility = 16 // for the IDE support
    options.release = 8

    /*options.compilerArgs.addAll([
            "--add-exports=java.base/jdk.internal.ref=ALL-UNNAMED",
            "--add-exports=java.base/sun.nio.ch=ALL-UNNAMED",
            "--add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
            "--add-opens=jdk.compiler/com.sun.tools.javac=ALL-UNNAMED",
            "--add-opens=java.base/java.lang=ALL-UNNAMED",
            "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
            "--add-opens=java.base/java.io=ALL-UNNAMED",
            "--add-opens=java.base/java.util=ALL-UNNAMED"
    ])*/

    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

tasks.generateGrammarSource {
    var packagee = "org/durmiendo/mods/parser/jcfg"
    var mainDir = outputDirectory

    maxHeapSize = "64m"
    arguments += [ "-visitor",
                   "-long-messages",
                   "-package", packagee.replaceAll("[/\\\\]", ".")]

    doFirst {
        delete mainDir.listFiles()
    }

    doLast {
        if (sourceSets.main.java.srcDirs[2].exists())
            delete sourceSets.main.java.srcDirs[2].listFiles()
        copy {
            from mainDir
            into sourceSets.main.java.srcDirs[2]
        }
    }
}