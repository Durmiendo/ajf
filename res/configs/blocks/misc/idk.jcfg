/*
С # начинаются макросы.
Один из них - import.
*/
#import arc.util.Log
#import arc.graphics.Color

// В фигурных скобках описываются объекты
{ Name
    /*
    Это конструктор, в любом объекте должен быть ровно один такой блок.
    Первый параметр - класс, чей "экземпляр" мы создаём.
    Дальше через запятую чередуются типы аргументов и сами аргументы конструктора переданного класса.
    К примеру, у класса Item конструктор выглядит так Item(String name), следовательно пишем:
    */
    @ mindustry.type.Item java.lang.String "Item name"

    /*
    Это установка значения одного из полей объекта.
    Первый параметр - название поля, второй - его новое значение, а разделять их могут двоеточие или знак равно.
    */
    hardness: 5
    flammability: 50f

    // Так выглядит переопределение одного из методов класса.
    @Override
    public void init() <
        // Всё что идёт между < и \> - джава код, и подчиняется он только синтаксису джавы.
        // Весь код между управляющими символами будет интегрирован в виртуальный файл и скомпилирован.
        super.init();
        arc.util.Log.info("Hello from jcfg!");
        // Кстати, эти управляющие символы можно вот так экранировать \>, во время компиляции все экраны перед ними будут убраны.
        // Поэтому можно совершенно спокойно написать:
        Log.info(1 \> 2);
    >

    explosiveness = 500

    // Помимо чисел в качестве значения можно передать другой объект, строку или константную ссылку (WIP).
    // Аргументы конструктора могут быть столь же разнообразны сколь значения полей.
    color: { @ Color float 1, float 1, float 1 }
}